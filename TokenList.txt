FUNCTION => def
IDENTIFIER => prime_numbers
OPEN_PARENTHESES => (
IDENTIFIER => m
COMMA => ,
IDENTIFIER => n
CLOSE_PARENTHESES => )
COLON => :
NEW_LINE => \n
TAB => \t
IDENTIFIER => result
ASSIGNMENT => =
NUMBER => 0
NEW_LINE => \n
TAB => \t
CYCLE => for
IDENTIFIER => i
IN => in
RANGE => range
OPEN_PARENTHESES => (
IDENTIFIER => m
COMMA => ,
IDENTIFIER => n
OPERATORS => +
NUMBER => 1
CLOSE_PARENTHESES => )
COLON => :
NEW_LINE => \n
TAB => \t
TAB => \t
IDENTIFIER => flag
ASSIGNMENT => =
BOOLEAN => False
NEW_LINE => \n
TAB => \t
TAB => \t
CYCLE => for
IDENTIFIER => j
IN => in
RANGE => range
OPEN_PARENTHESES => (
NUMBER => 2
COMMA => ,
IDENTIFIER => i
CLOSE_PARENTHESES => )
COLON => :
NEW_LINE => \n
TAB => \t
TAB => \t
TAB => \t
IF => if
IDENTIFIER => i
OPERATORS => %
IDENTIFIER => j
COMPARATORS => ==
NUMBER => 0
COLON => :
NEW_LINE => \n
TAB => \t
TAB => \t
TAB => \t
TAB => \t
IDENTIFIER => flag
ASSIGNMENT => =
BOOLEAN => True
NEW_LINE => \n
TAB => \t
TAB => \t
IF => if
IDENTIFIER => flag
COMPARATORS => ==
BOOLEAN => False
LOGIC => and
IDENTIFIER => i
COMPARATORS => !=
NUMBER => 1
COLON => :
NEW_LINE => \n
TAB => \t
TAB => \t
TAB => \t
IDENTIFIER => result
ASSIGNMENT => +=
IDENTIFIER => i
NEW_LINE => \n
TAB => \t
RETURN => return
IDENTIFIER => result
NEW_LINE => \n
NEW_LINE => \n
NEW_LINE => \n
FUNCTION => def
IDENTIFIER => main
OPEN_PARENTHESES => (
CLOSE_PARENTHESES => )
COLON => :
NEW_LINE => \n
TAB => \t
RETURN => return
IDENTIFIER => prime_numbers
OPEN_PARENTHESES => (
NUMBER => 2
COMMA => ,
NUMBER => 100
CLOSE_PARENTHESES => )
NEW_LINE => \n
